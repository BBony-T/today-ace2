// /api/admin/delete-roster.js
import { db } from '../_fb.js';
import admin from 'firebase-admin';
import { getUserFromReq } from '../_shared/initAdmin.js';

export default async function handler(req, res){
  try{
    if (req.method !== 'POST') return res.status(405).json({ success:false, error:'Method Not Allowed' });

    const me = getUserFromReq(req);
    if (!me || (me.role !== 'teacher' && me.role !== 'super')) {
      return res.status(401).json({ success:false, error:'로그인 필요' });
    }

    const { rosterId } = typeof req.body==='string' ? JSON.parse(req.body) : req.body;
    if (!rosterId) return res.status(400).json({ success:false, error:'rosterId 필요' });

    // boards.activeRosterIds에서 제거
    const teacherId = me.role === 'super' ? (req.query.teacherId || me.teacherId || me.uid) : (me.teacherId || me.uid);
    const boardRef = db().collection('boards').doc(teacherId);
    await db().runTransaction(async tx=>{
      const cur = await tx.get(boardRef);
      const arr = new Set(cur.exists ? (cur.data().activeRosterIds || []) : []);
      arr.delete(rosterId);
      tx.set(boardRef, {
        activeRosterIds: Array.from(arr),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }, { merge:true });
    });

    // rosters 문서 삭제
    await db().collection('rosters').doc(rosterId).delete();

    // (선택) students/users에서 rosterId 매칭되는 enabled 초기화 등 추가 처리 가능

    return res.status(200).json({ success:true });
  }catch(e){
    console.error('[delete-roster] error', e);
    return res.status(500).json({ success:false, error:e?.message || 'server error' });
  }
}
